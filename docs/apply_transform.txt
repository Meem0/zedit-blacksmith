p1.esp
	stat1a
	stat1b
	weap1a
		-> stat1a
	weap1b
		-> stat1b
	cobj1a
		-> weap1a
	cobj1b
		-> weap1b

transform = [
  {
    base: p1.esp\\weap1a,
    delta: {
      Damage: 15
    }
  },
  {
  	base: p1.esp\\cobj1b,
	delta: {
	  Ingredients\\[0]\\Count = 2
	}
  }
]

let addDependencies = function(transforms) {
	const basePaths = transforms.map(transform => transform.base);
	const recordDependencies = recordDependencyService.getDependencies(basePaths);
	return recordDependencies.map(recordPath => {
		const recordDelta = transforms.find(transform => transform.base === recordPath);
		return {
			base: recordPath,
			delta: recordDelta ? recordDelta : {}
		};
	});
}

let getRecordPathFromRecordObject = function(recordObject) {
}

let getRecordPathFromElement = function(pluginId, editorId) {
	return xelib.WithHandle(
		xelib.GetElement(pluginId, editorId),
		recordId => xelib.Path(recordId)
	);
}

let substituteReferences = function(recordObject, substitutions) {
	let recordObjectJson = JSON.Stringify(recordObject);
	for (let {from, to} of substitutions) {
		recordObjectJson = recordObjectJson.replace(from, to);
	}
	return JSON.parse(recordObjectJson);
}

let writeRecordObjects = function(pluginId, recordObjects) {
	let referenceSubstitutions = [];
	for (let recordObject of recordObjects) {
		const recordObjectSubstituted = substituteReferences(recordObject, substitutions);
		writeObjectToElementService.writeObjectToRecord(pluginId, recordObjectSubstituted);
		referenceSubstitutions.push({
			from: getRecordPathFromRecordObject(recordObject),
			to: getRecordPathFromElement(pluginId, recordObject.editorId)
		});
	}
}

let writeTransforms = function(transforms) {
	const allTransforms = addDependencies(transforms);
	const recordObjects = allTransforms.map(transform => pluginTransformService.createTransformation(transform));
	writeRecordObjects(recordObjects);
}

apply transform:
	build array of records to write, including dependencies
		[p1.esp\\weap1a, p1.esp\\stat1a, p1.esp\\cobj1b, p1.esp\\weap1b, p1.esp\\stat1b]
	
	OPTION 1:
		load all records from files into array of record objects
			[
				{
					EDID: 'weap1aId',
					...
					Damage: 12,
					...
				},
				...
			]
		apply diffs
			[
				{
					EDID: 'weap1aId',
					...
					Damage: 15,
					...
				},
				...
			]
		write array of record objects into output esp
		
	OPTION 2:
		copy all records into output esp
		write diffs into output esp
